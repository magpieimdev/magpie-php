parameters:
    level: 5
    paths:
        - src
        - tests
    tmpDir: .phpstan
    excludePaths:
        # Exclude specific DTO request files that have covariance issues with fromArray methods
        # These use 'self' instead of 'static' intentionally to avoid runtime errors
        - src/DTOs/Requests/Checkout/CreateCheckoutSessionRequest.php
        - src/DTOs/Requests/PaymentLinks/CreatePaymentLinkRequest.php
        - src/DTOs/Requests/PaymentLinks/UpdatePaymentLinkRequest.php
        - src/DTOs/Requests/PaymentRequests/CreatePaymentRequestRequest.php
    ignoreErrors:
        # Ignore test-related Mockery issues
        - '#Parameter \#1 \$client of class Magpie\\Resources\\.*Resource constructor expects Magpie\\Http\\Client, Mockery\\MockInterface given#'
        - '#Call to an undefined method Mockery\\ExpectationInterface\|Mockery\\HigherOrderMessage::once\(\)#'
        # Ignore specific test array offset issues (known false positives in test data)
        - '#Offset [12] does not exist on array\{0\?\: string, 1\?\: numeric-string, 2\?\: non-falsy-string\}#'
        # Ignore missing type hints for tests
        -
            identifier: missingType.iterableValue
            path: tests/*
        -
            identifier: missingType.generics
            path: tests/*
        
        # Hybrid API Design: Intentionally return DTOs instead of arrays for better UX
        - '#Method Magpie\\Resources\\.*::.*\(\) should return array but returns Magpie\\DTOs\\Responses\\.*#'
        
        # Factory Methods: Covariance issues handled via excludePaths above
        
        # Safe Static Usage: These are safe factory patterns, not unsafe static calls
        - '#Unsafe usage of new static\(\)#'
        
        # Test Hybrid API: Tests intentionally access properties on objects that implement ArrayAccess
        - '#Cannot access property \$\w+ on array#'
        
        # PHPDoc vs Implementation: Mixed return types are intentional for hybrid API
        - '#PHPDoc tag @return with type mixed is not subtype of native type array#'
        
        # Legacy PHPDoc: Some old interfaces referenced before refactoring
        - '#PHPDoc tag @param .* is not subtype of native type .*#'
        
        # Enum Handling: Safe dynamic enum calls in generic code
        - '#Static call to instance method .*::from\(\)#'
    reportUnmatchedIgnoredErrors: false
